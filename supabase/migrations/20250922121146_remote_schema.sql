

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE TYPE "public"."nar_level" AS ENUM (
    'high',
    'low'
);


ALTER TYPE "public"."nar_level" OWNER TO "postgres";


CREATE TYPE "public"."sex" AS ENUM (
    'm',
    'f'
);


ALTER TYPE "public"."sex" OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."authenticate_participant"("participant_code" "uuid") RETURNS smallint
    LANGUAGE "plpgsql"
    AS $$BEGIN
  RETURN (SELECT progress_counter FROM public.participant_codes WHERE code = participant_code AND is_used = false);
END;$$;


ALTER FUNCTION "public"."authenticate_participant"("participant_code" "uuid") OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."generate_participant_code"() RETURNS "text"
    LANGUAGE "plpgsql"
    AS $$
DECLARE
chars TEXT[] := '{0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z}';
result TEXT := '';
BEGIN
FOR i IN 1..5 LOOP
result := result || chars[1 + floor(random() * array_length(chars, 1))];
END LOOP;
RETURN result;
END;
$$;


ALTER FUNCTION "public"."generate_participant_code"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."generate_product_code"() RETURNS "text"
    LANGUAGE "plpgsql"
    AS $$
DECLARE
chars TEXT[] := '{0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z}';
result TEXT := '';
BEGIN
FOR i IN 1..5 LOOP
result := result || chars[1 + floor(random() * array_length(chars, 1))];
END LOOP;
RETURN result;
END;
$$;


ALTER FUNCTION "public"."generate_product_code"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."participant_codes" (
    "id" bigint NOT NULL,
    "code" "text" DEFAULT "public"."generate_participant_code"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "is_used" boolean DEFAULT false NOT NULL,
    "used_at" timestamp with time zone,
    "group" smallint NOT NULL,
    "progress_counter" smallint DEFAULT '-1'::smallint NOT NULL,
    "is_active" boolean DEFAULT true,
    "email" "text",
    "initial" "text"
);


ALTER TABLE "public"."participant_codes" OWNER TO "postgres";


ALTER TABLE "public"."participant_codes" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."participant_codes_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."rankings" (
    "id" bigint NOT NULL,
    "submitted_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "participant_id" bigint NOT NULL,
    "video_id" bigint NOT NULL,
    "rank" smallint
);


ALTER TABLE "public"."rankings" OWNER TO "postgres";


ALTER TABLE "public"."rankings" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."rankings_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."video_orders" (
    "id" bigint NOT NULL,
    "participant_id" bigint NOT NULL,
    "video_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "order" smallint
);


ALTER TABLE "public"."video_orders" OWNER TO "postgres";


ALTER TABLE "public"."video_orders" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."video_orders_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."videos" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "title" character varying NOT NULL,
    "url" "text" NOT NULL,
    "is_active" boolean DEFAULT true NOT NULL,
    "group" smallint,
    "sex" "public"."sex" NOT NULL,
    "nar_level" "public"."nar_level",
    "thumbnail_proxy_url" "text",
    "thumbnail_url" "text"
);


ALTER TABLE "public"."videos" OWNER TO "postgres";


ALTER TABLE "public"."videos" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."videos_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."participant_codes"
    ADD CONSTRAINT "participant_codes_code_key" UNIQUE ("code");



ALTER TABLE ONLY "public"."participant_codes"
    ADD CONSTRAINT "participant_codes_id_key" UNIQUE ("id");



ALTER TABLE ONLY "public"."participant_codes"
    ADD CONSTRAINT "participant_codes_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."rankings"
    ADD CONSTRAINT "rankings_id_key" UNIQUE ("id");



ALTER TABLE ONLY "public"."rankings"
    ADD CONSTRAINT "rankings_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."video_orders"
    ADD CONSTRAINT "video_orders_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."videos"
    ADD CONSTRAINT "videos_id_key" UNIQUE ("id");



ALTER TABLE ONLY "public"."videos"
    ADD CONSTRAINT "videos_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."videos"
    ADD CONSTRAINT "videos_title_key" UNIQUE ("title");



ALTER TABLE ONLY "public"."videos"
    ADD CONSTRAINT "videos_url_key" UNIQUE ("url");



ALTER TABLE ONLY "public"."rankings"
    ADD CONSTRAINT "rankings_participant_id_fkey" FOREIGN KEY ("participant_id") REFERENCES "public"."participant_codes"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."rankings"
    ADD CONSTRAINT "rankings_video_id_fkey" FOREIGN KEY ("video_id") REFERENCES "public"."videos"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."video_orders"
    ADD CONSTRAINT "video_orders_participant_id_fkey" FOREIGN KEY ("participant_id") REFERENCES "public"."participant_codes"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."video_orders"
    ADD CONSTRAINT "video_orders_video_id_fkey" FOREIGN KEY ("video_id") REFERENCES "public"."videos"("id") ON UPDATE CASCADE ON DELETE CASCADE;



CREATE POLICY "Allow code access" ON "public"."participant_codes" FOR SELECT USING (true);



CREATE POLICY "Allow read access for auth user" ON "public"."video_orders" FOR SELECT USING (true);



CREATE POLICY "Allow service role to increment progress_counter" ON "public"."participant_codes" FOR UPDATE TO "service_role" USING (("auth"."role"() = 'service_role'::"text"));



CREATE POLICY "Allow update to is_active" ON "public"."participant_codes" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (("is_active" = false));



CREATE POLICY "Allow update to is_active and group" ON "public"."videos" FOR UPDATE TO "authenticated" USING (true) WITH CHECK ((("is_active" = false) OR ("group" = ANY (ARRAY[1, 2]))));



CREATE POLICY "Enable insert for authenticated users only" ON "public"."participant_codes" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."videos" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable read access for all users" ON "public"."rankings" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."videos" FOR SELECT USING (true);



ALTER TABLE "public"."participant_codes" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."rankings" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."video_orders" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."videos" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

























































































































































GRANT ALL ON FUNCTION "public"."authenticate_participant"("participant_code" "uuid") TO "anon";
GRANT ALL ON FUNCTION "public"."authenticate_participant"("participant_code" "uuid") TO "authenticated";
GRANT ALL ON FUNCTION "public"."authenticate_participant"("participant_code" "uuid") TO "service_role";



GRANT ALL ON FUNCTION "public"."generate_participant_code"() TO "anon";
GRANT ALL ON FUNCTION "public"."generate_participant_code"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."generate_participant_code"() TO "service_role";



GRANT ALL ON FUNCTION "public"."generate_product_code"() TO "anon";
GRANT ALL ON FUNCTION "public"."generate_product_code"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."generate_product_code"() TO "service_role";


















GRANT ALL ON TABLE "public"."participant_codes" TO "anon";
GRANT ALL ON TABLE "public"."participant_codes" TO "authenticated";
GRANT ALL ON TABLE "public"."participant_codes" TO "service_role";



GRANT ALL ON SEQUENCE "public"."participant_codes_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."participant_codes_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."participant_codes_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."rankings" TO "anon";
GRANT ALL ON TABLE "public"."rankings" TO "authenticated";
GRANT ALL ON TABLE "public"."rankings" TO "service_role";



GRANT ALL ON SEQUENCE "public"."rankings_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."rankings_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."rankings_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."video_orders" TO "anon";
GRANT ALL ON TABLE "public"."video_orders" TO "authenticated";
GRANT ALL ON TABLE "public"."video_orders" TO "service_role";



GRANT ALL ON SEQUENCE "public"."video_orders_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."video_orders_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."video_orders_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."videos" TO "anon";
GRANT ALL ON TABLE "public"."videos" TO "authenticated";
GRANT ALL ON TABLE "public"."videos" TO "service_role";



GRANT ALL ON SEQUENCE "public"."videos_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."videos_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."videos_id_seq" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";






























RESET ALL;
